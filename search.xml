<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[go test]]></title>
    <url>%2F2019%2F12%2F05%2Fgo-test%2F</url>
    <content type="text"><![CDATA[Go语言拥有一套单元测试和性能测试系统，仅需要添加很少的代码就可以快速测试一段需求代码。 go test 命令，会自动读取源码目录下面名为 *_test.go 的文件，生成并运行测试用的可执行文件。输出的信息类似 1234ok archive/tar 0.011sFAIL archive/zip 0.022sok compress/gzip 0.033s... 性能测试系统可以给出代码的性能数据，帮助测试者分析性能问题。单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含义，一般要根据实际情况去判定其具体含义 单元测试要开始一个单元测试，需要准备一个 go 源码文件，在命名文件时需要让文件必须以_test结尾。默认的情况下，go test 命令不需要任何的参数，它会自动把你源码包下面所有 test 文件测试完毕，当然你也可以带上参数。 这里介绍几个常用的参数： -bench regexp 执行相应的 benchmarks，例如 -bench=. -cover 开启测试覆盖率 -run regexp 只运行 regexp 匹配的函数，例如 -run=Array 那么就执行包含有 Array 开头的函数 -v 显示测试的详细命令 单元测试源码文件可以由多个测试用例组成，每个测试用例函数需要以Test为前缀，例如： 1func TestXXX( t *testing.T ) 测试用例文件不会参与正常源码编译，不会被包含到可执行文件中。 测试用例文件使用 go test 指令来执行，没有也不需要 main() 作为函数入口。所有在以_test结尾的源码内以Test开头的函数会自动被执行。 测试用例可以不传入 *testing.T 参数。 123456789Book-Pro% go test demo_test.go ok command-line-arguments 0.006sBook-Pro% go test -v demo_test.go=== RUN TestAbsfdsfdasdfas--- PASS: TestAbs (0.00s)PASSok command-line-arguments 0.005sBook-Pro% 代码说明如下： 第 1 行，在 go test 后跟 demo_test.go 文件，表示测试这个文件里的所有测试用例。 第 2 行，显示测试结果，ok 表示测试通过，command-line-arguments 是测试用例需要用到的一个包名，0.005s 表示测试花费的时间。 第 3 行，显示在附加参数中添加了-v，可以让测试时显示详细的流程。 第 4 行，表示开始运行名叫 TestAbs 的测试用例。 第 5 行，表示已经运行完 TestAbs 的测试用例，PASS 表示测试成功。 第 6 行打印字符串fdsfdasdfas。 go test 指定文件时默认执行文件内的所有测试用例。可以使用-run参数选择需要的测试用例单独执行 1go test -v -run TestA demo_test.go TestA 和 TestAK 的测试用例都被执行，原因是-run跟随的测试用例的名称支持正则表达式，使用-run TestA$即可只执行 TestA 测试用例。 标记单元测试结果当需要终止当前测试用例时，可以使用 FailNow，参考下面的代码。 123func TestFailNow(t *testing.T) &#123; t.FailNow()&#125; 测试结果标记（具体位置是）还有一种只标记错误不终止测试的方法，代码如下： 12345func TestFail(t *testing.T) &#123; fmt.Println(&quot;before fail&quot;) t.Fail() fmt.Println(&quot;after fail&quot;)&#125; 测试结果如下： 1234567=== RUN TestFailbefore failafter fail--- FAIL: TestFail (0.00s)FAILexit status 1FAIL command-line-arguments 0.002s 从日志中看出，第 5 行调用 Fail() 后测试结果标记为失败，但是第 7 行依然被程序执行了。 单元测试日志每个测试用例可能并发执行，使用 testing.T 提供的日志输出可以保证日志跟随这个测试上下文一起打印输出。testing.T 提供了几种日志输出方法，详见下表所示。 方 法 备 注 Log 打印日志，同时结束测试 Logf 格式化打印日志，同时结束测试 Error 打印错误日志，同时结束测试 Errorf 格式化打印错误日志，同时结束测试 Fatal 打印致命日志，同时结束测试 Fatalf 格式化打印致命日志，同时结束测试 开发者可以根据实际需要选择合适的日志。 基准测试——获得代码内存占用和运行效率的性能数据基准测试可以测试一段程序的运行性能及耗费 CPU 的程度。Go 语言中提供了基准测试框架，使用方法类似于单元测试，使用者无须准备高精度的计时器和各种分析工具，基准测试本身即可以打印出非常标准的测试报告 基础测试基本使用代码说明如下： 第 1 行的-bench=.表示运行 benchmark_test.go 文件里的所有基准测试，和单元测试中的-run类似。 第 4 行中显示基准测试名称，2000000000 表示测试的次数，也就是 testing.B 结构中提供给程序使用的 N。“0.33 ns/op”表示每一个操作耗费多少时间（纳秒）。 注意：Windows 下使用 go test 命令行时，-bench=.应写为-bench=&quot;.&quot;。 基准测试原理基准测试框架对一个测试用例的默认测试时间是 1 秒。开始测试时，当以 Benchmark 开头的基准测试用例函数返回时还不到 1 秒，那么 testing.B 中的 N 值将按 1、2、5、10、20、50……递增，同时以递增后的值重新调用基准测试用例函数。 自定义测试时间123456$ go test -v -bench=. -benchtime=5s benchmark_test.gogoos: linuxgoarch: amd64Benchmark_Add-4 10000000000 0.33 ns/opPASSok command-line-arguments 3.380s 测试内存基准测试可以对一段代码可能存在的内存分配进行统计，下面是一段使用字符串格式化的函数，内部会进行一些分配操作。 123456$ go test -v -bench=Alloc -benchmem benchmark_test.gogoos: linuxgoarch: amd64Benchmark_Alloc-4 20000000 109 ns/op 16 B/op 2 allocs/opPASSok command-line-arguments 2.311s 第 1 行的代码中-bench后添加了 Alloc，指定只测试 Benchmark_Alloc() 函数。 第 4 行代码的“16 B/op”表示每一次调用需要分配 16 个字节，“2 allocs/op”表示每一次调用有两次分配。 开发者根据这些信息可以迅速找到可能的分配点，进行优化和调整。]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络安全]]></title>
    <url>%2F2019%2F12%2F03%2F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%2F</url>
    <content type="text"><![CDATA[什么是xss攻击XSS 攻击：跨站脚本攻击 (Cross-Site Scripting)，为了不和层叠样式表 (Cascading Style Sheets, CSS) 的缩写混淆，故将跨站脚本攻击缩写为 XSS。XSS 是一种常见的 web 安全漏洞，它允许攻击者将恶意代码植入到提供给其它用户使用的页面中。不同于大多数攻击 (一般只涉及攻击者和受害者)，XSS 涉及到三方，即攻击者、客户端与 Web 应用。XSS 的攻击目标是为了盗取存储在客户端的 cookie 或者其他网站用于识别客户端身份的敏感信息。一旦获取到合法用户的信息后，攻击者甚至可以假冒合法用户与网站进行交互。 XSS分类XSS 通常可以分为两大类：一类是存储型 XSS，主要出现在让用户输入数据，供其他浏览此页的用户进行查看的地方，包括留言、评论、博客日志和各类表单等。应用程序从数据库中查询数据，在页面中显示出来，攻击者在相关页面输入恶意的脚本数据后，用户浏览此类页面时就可能受到攻击。这个流程简单可以描述为：恶意用户的 Html 输入 Web 程序 -&gt; 进入数据库 -&gt; Web 程序 -&gt; 用户浏览器。另一类是反射型 XSS，主要做法是将脚本代码加入 URL 地址的请求参数里，请求参数进入程序后在页面直接输出，用户点击类似的恶意链接就可能受到攻击。 XSS 目前主要的手段和目的如下： 盗用 cookie，获取敏感信息。 利用植入 Flash，通过 crossdomain 权限设置进一步获取更高权限；或者利用 Java 等得到类似的操作。 利用 iframe、frame、XMLHttpRequest 或上述 Flash 等方式，以（被攻击者）用户的身份执行一些管理动作，或执行一些如：发微博、加好友、发私信等常规操作，前段时间新浪微博就遭遇过一次 XSS。 利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。 在访问量极大的一些页面上的 XSS 可以攻击一些小型网站，实现 DDoS 攻击的效果]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>学习文档</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pprof性能分析环境搭建]]></title>
    <url>%2F2019%2F12%2F02%2Fpprof%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[Proof runtime/pprof：采集程序（非 Server）的运行数据进行分析 net/http/pprof：采集 HTTP Server 的运行时数据进行分析 环境搭建 生产关系图和火焰图需要安装yum install graphviz dot -V 查看是否安装成功 如果程序本身就是web服务器,那么只需要通过代码： 123import(_&quot;net/http/pprof&quot;) ，将pprof引入，然后在浏览器访问http://localhost:port/debug/pprof/就能看到当前web服务的状态，包括CPU占用情况和内存使用情况等 如果你的go程序不是web服务器，而是一个服务进程，那么你就需要开启一个goroutine来开启端口监听。比如： 123go func() &#123; log.Println(http.ListenAndServe(&quot;localhost:6060&quot;, nil)) &#125;() 同样的访问http://localhost:6060/debug/pprof就可以查看程序运行的信息。 如果你的程序只是一个应用程序，那么你就需要使用“runtime/ppprof”包了。官网给出的代码是这样的： 123456789101112var cpuprofile = flag.String(&quot;cpuprofile&quot;, &quot;&quot;, &quot;write cpu profile to file&quot;)func main() &#123; flag.Parse() if *cpuprofile != &quot;&quot; &#123; f, err := os.Create(*cpuprofile) if err != nil &#123; log.Fatal(err) &#125; pprof.StartCPUProfile(f) defer pprof.StopCPUProfile() &#125; 然后我们在运行这个程序的时候加上一个参数–cpuprofile=*.prof就可以再对应目录下生成一个.pprof的文件,程序运行的信息就都在这个文件里了。然后进入对应目录,运行命令:go tool pprof 加刚才生成的pprof文件命即可进入到pprof中，输入web命令，可以生成对应的svg文件。 生成.pb.gz 文件命令1go tool pprof http://localhost:6060/debug/pprof/pprofile?second=120 生成图像界面1go tool pprof -http=localhost:8080 ./test /root/pprof/*.pb.gz 大多数框架中都有自己的pprof,应用时可进行研究 未完待续。。。。。]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>pprof</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[postgres学习笔记一]]></title>
    <url>%2F2019%2F11%2F28%2Fpostgres%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%2F</url>
    <content type="text"><![CDATA[视图查询1select * from pipelinedb.views 流表创建12345678create view test_table with (action = materialize) asSELECT date_trunc(&apos;hour&apos;::text, log_stream.datetime) AS datetime, log_stream.uri, log_stream.servername, count(log_stream.datetime) AS count FROM log_stream GROUP BY (date_trunc(&apos;hour&apos;::text, log_stream.datetime)), log_stream.uri, log_stream.servername 索引的类型：PostgreSQL提供了多 种索引类型：B-Tree、Hash、GiST和GIN，由于它们使用了不同的算法，因此每种索引类型都有其适合的查询类型，缺省时，CREATE INDEX命令将创建B-Tree索引。 B-Tree: B-Tree索引主要用于等于和范围查询，特别是当索引列包含操作符” &lt;、&lt;=、=、&gt;=、&gt;”、BETWEEN、IN、IS NULL和IS NOT NULL的查询中，PostgreSQL的查询规划器都会考虑使用B-Tree索引。然而对于基于模式匹配操作符的查询，如LIKE、ILIKE、~和 ~*，仅当模式存在一个常量，且该常量位于模式字符串的开头时，如col LIKE ‘foo%’或col ~ ‘^foo’，索引才会生效，否则将会执行全表扫描，如：col LIKE ‘%bar’。 hash 1CREATE INDEX name ON table USING hash (column); 散列(Hash)索引只能处理简单的等于比较。当索引列使用等于操作符进行比较时，查询规划器会考虑使用散列索引。 这里需要额外说明的是，PostgreSQL散列索引的性能不比B-Tree索引强，但是散列索引的尺寸和构造时间则更差。另外，由于散列索引操作目前没有记录WAL日志，因此一旦发生了数据库崩溃，我们将不得不用REINDEX重建散列索引。 GiST GiST索引不是一种单独的索引类型，而是一种架构，可以在该架构上实现很多不同的索引策略。从而可以使GiST索引根据不同的索引策略，而使用特定的操作符类型。 GIN GIN索引是反转索引，它可以处理包含多个键的值(比如数组)。与GiST类似，GIN同样支持用户定义的索引策略，从而可以使GIN索引根据不同的索引策略，而使用特定的操作符类型。作为示例，PostgreSQL的标准发布中包含了用于一维数组的GIN操作符类型，如：&lt;@、@&gt;、=、&amp;&amp;等。 http://mysql.taobao.org/monthly/2016/09/ 数据库内核分析]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>postgres</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[postgres索引]]></title>
    <url>%2F2019%2F11%2F26%2Fpostgres%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[添加索引的优点 索引有助于加快 SELECT 查询和 WHERE 子句 索引可以创建或删除，但不会影响数据。 添加索引的确定 但它会减慢使用 UPDATE 和 INSERT 语句时的数据输入 存放索引详细信息的表1\d+ pg_stat_user_indexes; 示例一 查看所有表索引使用情况123456select relname, indexrelname, idx_scan, idx_tup_read, idx_tup_fetch from pg_stat_user_indexes order by idx_scan asc, idx_tup_read asc, idx_tup_fetch asc; 示例二 查看某个表的索引使用情况12345678select relname, indexrelname, idx_scan, idx_tup_read, idx_tup_fetch from pg_stat_user_indexes where relname = table_name order by idx_scan asc, idx_tup_read asc, idx_tup_fetch asc; CREATE INDEX 命令1CREATE INDEX index_name ON table_name; 索引类型单例索引 单列索引是一个只基于表的一个列上创建的索引，基本语法如下: 12CREATE INDEX index_nameON table_name (column_name); 组合索引 组合索引是基于表的多列上创建的索引，基本语法如下： 12CREATE INDEX index_nameON table_name (column1_name, column2_name); 不管是单列索引还是组合索引，该索引必须是在 WHEHE 子句的过滤条件中使用非常频繁的列。 如果只有一列被使用到，就选择单列索引，如果有多列就使用组合索引。 唯一索引 使用唯一索引不仅是为了性能，同时也为了数据的完整性。唯一索引不允许任何重复的值插入到表中。基本语法如下： 12CREATE UNIQUE INDEX index_nameon table_name (column_name); 局部索引 局部索引 是在表的子集上构建的索引；子集由一个条件表达式上定义。索引只包含满足条件的行。基础语法如下： 12CREATE INDEX index_nameon table_name (conditional_expression); 隐式索引 隐式索引 是在创建对象时，由数据库服务器自动创建的索引。索引自动创建为主键约束和唯一约束。 DROP INDEX （删除索引）1DROP INDEX index_name; 什么情况下要避免使用索引？虽然索引的目的在于提高数据库的性能，但这里有几个情况需要避免使用索引。 使用索引时，需要考虑下列准则： 索引不应该使用在较小的表上。 索引不应该使用在有频繁的大批量的更新或插入操作的表上。 索引不应该使用在含有大量的 NULL 值的列上。 索引不应该使用在频繁操作的列上。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>postgres</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重学go语言]]></title>
    <url>%2F2019%2F11%2F21%2F%E9%87%8D%E5%AD%A6go%E8%AF%AD%E8%A8%80%2F</url>
    <content type="text"><![CDATA[脱离 Go 文档之外，学习 Go 会遇到哪些问题： 程序怎么理解一个变量？编码过程中为什么使用常量？ Go语言里有枚举类型么？ Go语言引用类型和其他语言有什么不同？ 同是流控制语句，switch 和 if 有什么不同？ 在编码过程中写过 goto 语句么？ Go 支持支持尾递归优化么？ 如何判断两个函数变量相等？ 匿名函数有性能问题吗？ 使用闭包会导致什么性能问题？ 什么是错误？和异常有什么区别？ 是不是数组就一定能分配在栈上？ 字符串怎么性能优化？ 字典怎么性能优化？ 字段对齐对结构体有什么影响？ Go 语言怎么实现 OOP 的方法和接口？ 接口调用有哪些性能问题？ …… 有问题，就要有解决方案，面对 Go 语言的知识漏洞，你该怎么办？]]></content>
  </entry>
  <entry>
    <title><![CDATA[shell中目录及文件权限]]></title>
    <url>%2F2019%2F11%2F21%2Fshell%E4%B8%AD%E7%9B%AE%E5%BD%95%E5%8F%8A%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%2F</url>
    <content type="text"><![CDATA[权限对文件的意义r：可读取此文件的内容 w：可编辑，新增和修改此文件（但是不包含删除），如果没有r权限，则无法写 x：该文件具有被执行的权限，可以被删除 R W X在linux中对应的数字与组合的意义读取权限 r = 4写入权限 w = 2执行权限 x = 1 775 这三个数字代表拥有者，组用户，其他用户的权限。例如：7 拥有者有 读取，写入，执行权限7 组用户有 读取，写入，执行权限5 其他用户有 读取，执行权限(4+1 = 5) 777 与 775的区别是其他用户有写入权限，而775的没有。 举个例子：文件A，权限是775root是拥有者Postgres是组用户Nobody 是其他用户 那么Root,postgres,nobody都能对文件A读取和执行。Root,postgres 能对文件A写入。Nobody不能对文件A写入。 如果是777则三个用户都能读取，写入，执行文件A]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>说明文档</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[http_user_agent笔记]]></title>
    <url>%2F2019%2F10%2F31%2Fhttp-user-agent%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[UA介绍它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识。例如用手机访问谷歌和电脑访问是不一样的，这些是谷歌根据访问者的 UA来判断的。UA可以进行伪装。 浏览器的UA字串的标准格式：浏览器标识 (操作系统标识; 加密等级标识; 浏览器语言) 渲染引擎标识版本信息。但各个浏览器有所不同。 字串说明： 浏览器标识 出于兼容及推广等目的，很多浏览器的标识相同，因此浏览器标识并不能说明浏览器的真实版本，真实版本信息在 UA 字串尾部可以找到。 操作系统标识 ![image-20191031153306967](/Users/yangqw/Library/Application Support/typora-user-images/image-20191031153306967.png) 加密等级 N: 表示无安全加密I: 表示弱安全加密U: 表示强安全加密 浏览器语言 在首选项 &gt; 常规 &gt; 语言中指定的语言 渲染引擎 显示浏览器使用的主流渲染引擎有：Gecko、WebKit、KHTML、Presto、Trident、Tasman等，格式为：渲染引擎/版本信息 版本信息 显示浏览器的真实版本信息，格式为：浏览器/版本信息 浏览器User-Agent的详细信息 PC端： safari 5.1 – MAC User-Agent:Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50 safari 5.1 – Windows User-Agent:Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50 IE 9.0 User-Agent:Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; IE 8.0 User-Agent:Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0) IE 7.0 User-Agent:Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0) IE 6.0 User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1) Firefox 4.0.1 – MAC User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Firefox 4.0.1 – Windows User-Agent:Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Opera 11.11 – MAC User-Agent:Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11 Opera 11.11 – Windows User-Agent:Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11 Chrome 17.0 – MAC User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11 傲游（Maxthon） User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0) 腾讯TT User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; TencentTraveler 4.0) 世界之窗（The World） 2.x User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1) 世界之窗（The World） 3.x User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; The World) 搜狗浏览器 1.x User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0) 360浏览器 User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE) Avant User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Avant Browser) Green Browser User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1) 移动设备端： safari iOS 4.33 – iPhone User-Agent:Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5 safari ios 4.33 – iPod Touch User-Agent:Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5 safari iOS 4.33 – iPad User-Agent:Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5 Android N1 User-Agent: Mozilla/5.0 (Linux; U; android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1 Android QQ浏览器 For android User-Agent: MQQBrowser/26 Mozilla/5.0 (linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1 Android Opera Mobile User-Agent: Opera/9.80 (Android 2.3.4; Linux; Opera Mobi/build-1107180945; U; en-GB) Presto/2.8.149 Version/11.10 Android Pad Moto Xoom User-Agent: Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13 BlackBerry User-Agent: Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+ WebOS HP Touchpad User-Agent: Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0 Nokia N97 User-Agent: Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124 Windows Phone Mango User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan) UC无 User-Agent: UCWEB7.0.2.37/28/999 UC标准 User-Agent: NOKIA5700/ UCWEB7.0.2.37/28/999 UCOpenwave User-Agent: Openwave/ UCWEB7.0.2.37/28/999 UC Opera User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999 二、浏览器识别 1、IE浏览器（以IE 9.0 为例） PC端：User-Agent:Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; 移动设备：User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan) 由于遨游、世界之窗、360浏览器、腾讯浏览器以及搜狗浏览器、Avant、Green Browser均采用IE的内核，因此IE浏览器判断的标准是”MSIE“字段，MSIE字段后面的数字为版本号，但同时还需要判断不包 含”Maxthon“、”The world“、”360SE“、”TencentTraveler“、”SE“、”Avant“等字段（Green Browser没有明显标识）。移动设备还需要判断IEMobile+版本号。 2、360浏览器 PC端：User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; InfoPath.2; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; 360SE) 移动设备：暂无 360浏览器的判断标准是”360SE”字段，没有版本表示。 3、搜狗浏览器 PC端：User-Agent:Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0) 移动设备：暂无 搜狗浏览器的判断标准是”SE“、”MetaSr“字段，版本号为SE后面的数字。 4、Chrome PC端：Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11 移动设备：User-Agent: Mozilla/5.0 (Linux; U; Android 2.2.1; zh-cn; HTC_Wildfire_A3333 Build/FRG83D) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1 PC端chrome浏览器的判断标准是chrome字段，chrome后面的数字为版本号；移动端的chrome浏览器判断”android“、”linux“、”mobile safari“等字段，version后面的数字为版本号。 5、Safari PC端：User-Agent:Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50 移动设备：User-Agent:Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5 由于Chrome及Nokia’s Series 60 browser也使用WebKit内核，因此Safari浏览器的判断必须是：包含safari字段，同时不包含chrome等信息，确定 后”version/“后面的数字即为版本号。在以上条件下包含Mobile字段的即为移动设备上的Safari浏览器。 6、腾讯浏览器 PC端：User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; TencentTraveler 4.0; .NET CLR 2.0.50727) 移动设备：User-Agent: MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1 腾讯浏览器的判断标准是”TencentTraveler“或者”QQBrowser“，TencentTraveler或QQBrowser后面的数字为版本号。 7、Firefox PC端：User-Agent:Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 移动设备：User-Agent: Mozilla/5.0 (Androdi; Linux armv7l; rv:5.0) Gecko/ Firefox/5.0 fennec/5.0 Firefox的判断标准是Firefox字段，firefox后面的数字为版本号。 8、The world PC端：User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; The World) 移动设备：暂无 Theworld浏览器的判断标准是”The world“字段，没有标示版本号。 需要注意的是：The world 2.x版本的User-Agent中没有”The world“的字段。 9、遨游 PC端：User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0) 移动设备：暂无 遨游浏览器的判断标准是”Maxthon“，Maxthon后面的数字为版本号。 10、Opera PC端：User-Agent:Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11 移动设备：User-Agent: Opera/9.80 (Android 2.3.4; Linux; Opera mobi/adr-1107051709; U; zh-cn) Presto/2.8.149 Version/11.10 opera浏览器的判断标准是opera字段，opera字段后面的数字为版本号。 11、UC浏览器 UC Web有多种模式浏览方式，对应的User-Agent为： UC无 User-Agent: UCWEB7.0.2.37/28/999 UC标准 User-Agent: NOKIA5700/ UCWEB7.0.2.37/28/999 UCOpenwave User-Agent: Openwave/ UCWEB7.0.2.37/28/999 UC Opera User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999 UC浏览器的判断标准是”UCWEB“字段，UCWEB后面的数字为版本号。 操作系统定向 操作系统定向依赖于各个浏览器在打开页面时所传输的http header信息中的User-Agent，关于User-Agent的说明，请参见Http header之User-Agent。 User-Agent的详细信息，请参见浏览器User-Agent的详细信息。 我们来了解User-Agent中的不同操作系统的识别方法。 PC端： ![image-20191031161644071](/Users/yangqw/Library/Application Support/typora-user-images/image-20191031161644071.png) 移动设备端： ![image-20191031161659152](/Users/yangqw/Library/Application Support/typora-user-images/image-20191031161659152.png) https://www.jianshu.com/p/da6a44d0791e]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Go Module笔记]]></title>
    <url>%2F2019%2F10%2F29%2FGo-Module%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[下载加速，执行命令1export GOPROXY=https://goproxy.io 只下载依赖包1go mod download 拉取必须模块，移除不用的模块1go mod tidy 注意点： 如果tag对应内容有更新，需要删除pkg中的缓存内容。这点比较恶心了。 12cd $GOPATH/pkg/modrm -rf * go get、 go run、go build 也会自动下载依赖]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell笔记随笔]]></title>
    <url>%2F2019%2F10%2F28%2Fshell%E7%AC%94%E8%AE%B0%E9%9A%8F%E7%AC%94%2F</url>
    <content type="text"><![CDATA[shell使用变量的值，获取一个新的变量名的值12345#!/bin/bashname=&quot;yqw&quot;yqw=31result=`eval echo &apos;$&apos;&quot;$&#123;name&#125;&quot;`echo $&#123;result&#125; 获取传入参数的最后一个值12345./test 1 2 3for last; do true; doneecho $last3]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>说明文档</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客编写说明文档]]></title>
    <url>%2F2019%2F09%2F09%2Fhexo%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[编写博客基本命令1hexo new &apos;博客名称&apos; -- 创建博客 12hexo g --generate 生成静态文件hexo d --deploy 文件生产后立即部署网站 hexo指令网站 Run server1hexo server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: [Deployment](]]></content>
      <categories>
        <category>hexo说明文档</category>
      </categories>
      <tags>
        <tag>说明文档</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F07%2F03%2F%E5%9F%BA%E4%BA%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%2F</url>
    <content type="text"><![CDATA[基于微服务架构. 数据库原理常用性能优化技术. 以及 NoSQL原理、使用场景以及限制,精通redis。熟悉至少一种消息队列 Kafka/Rabbitmq/Redis等 负责所编程序的自测试工作，并参加系统集成和联调 精通TCP/IP，HTTP协议，包括但不限于RPC、调用策略等；精通Protobuf/JSON序列化协议者优先 熟悉mysql,redis,mongodb等配置使用方法； 熟悉tcp/ip, http/https协议 熟悉docker开发方式； 有gitlab-ci/travis-ci/teamcity使用经验优先；]]></content>
  </entry>
</search>
